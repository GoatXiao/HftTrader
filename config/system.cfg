config = 
{
    user = 
    (
        // 保留允许多账户配置的拓展
        {
            BrokerId = "5040";
            UserId = "91018866";
            PassWord = "zyqh123.";
            AppId = "client_zyshfe_1.0";
            AuthCode = "EF46NX3NW45HCR56";
        }
    );

    md = 
    {
        Interface = "MdInterface";
        LocalAddr = "MdLocalAddr";
        RemoteAddr = "tcp://10.10.10.10:31807";
        RemotePort = 10000;
    };

    trade =
    {
        Interface = "TradeInterface";
        LocalAddr = "TradeLocalAddr";
        TradeAddr = "tcp://10.10.10.10:31803";
        QueryAddr = "QueryAddr";
        TradePort = 10003;
        QueryPort = 10002;
    };

    broker = 
    {
        fee_per_volume = 0.1; // 0.1元/手
        rebate_rate = 0.95; // 期货公司返还比例
    };

    simulate = 
    {
        place_rate = 0.8;
        hit_rate = 0.2;
    };

    strategy = 
    {
        // 行情订阅列表
        subscription = ["rb2401","hc2401"]; 

        instrument = 
        (
            // include的合约顺序必须与subscription顺序一致
            @include "config/inst/rb2401.cfg",
            @include "config/inst/hc2401.cfg"
        );

        // 策略线程开启数，系统会自动忽略超过num_threads数量的线程配置
        num_threads = 2; // 目前最大允许开启10个策略线程（根据系统资源情况而定）

        thread = 
        (
            // 以下根据num_threads配置thread group { ... }
            // 不建议把抵达时间间隔很小的合约放在一个线程里计算信号

            // 假设a2401/b2401行情抵达间隔为T1，两者在同一个线程里计算信号，耗时均为T2
            // 若T2>T1，则会造成线程拥堵，即b2401的处理被滞后了dT=T2-T1
            // NOTE：一般因子计算不会造成拥堵，神经网络会

            // 关于strategy_id的说明：
            // 一个ID应该对应一个大策略框架的实例实现，以及一个与其匹配的配置文件结构
            // 因为事先不知道策略配置结构，所以这里只能指定一个ID
            // 用户需自己实现对应策略和管理其配置文件

            {
                // 这个策略线程订阅hc2401和rb2401，但是只输出hc2401的信号到执行线程
                inst_list = ["hc2401","rb2401"]; // 配置到该线程的合约列表
                allocate_output_msg = [1, 0]; // 是否申请输出信号消息
                strategy_id = 0; // 线程初始化绑定策略实例ID
                bind_cpuid = 1; // DO NOT CHANGE
            },
            {
                // 这个策略线程订阅hc2401和rb2401，但是只输出rb2401的信号到执行线程
                inst_list = ["hc2401","rb2401"]; // 配置到该线程的合约列表
                allocate_output_msg = [0, 1]; // 是否申请输出信号消息
                strategy_id = 0; // 线程初始化绑定策略实例ID
                bind_cpuid = 2; // DO NOT CHANGE
            },
            {
                // 这个策略线程订阅fu2401和sc2401，并输出两者信号到执行线程
                inst_list = ["fu2401","sc2401"]; // 配置到该线程的合约列表
                allocate_output_msg = [1, 1]; // 是否申请输出信号消息
                strategy_id = 0; // 线程初始化绑定策略实例ID
                bind_cpuid = 3; // DO NOT CHANGE
            } 
        ); 
    };
}
